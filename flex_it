DIGITS [0-9]+
ID [a-zA-Z][a-zA-Z0-9_]*
FRAC ("."{DIGITS})
OPTIONALEXP (E("\+"|"-")?{DIGITS})?
INT {DIGITS}
FLOAT {DIGITS}{FRAC}{OPTIONALEXP}
STRING ("\"")(.*)("\"")
CHAR ("\'")(.)("\'")
COMMENTS ("//")(.*)
%%
{COMMENTS}  {
                printf("A comment: %s\n", yytext);
                    }
{INT}	{
                     printf( "An integer: %s (%d)\n", yytext,
                             atoi( yytext ) );
         			 }

{FLOAT}  {
                     printf( "A float: %s (%g)\n", yytext,
                             atof( yytext ) );
                     }

if|else|auto|const|break|case|char|continue|default|do|while|enum|extern|float|for|goto|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|#define|#include	{
                     printf( "A keyword: %s\n", yytext );
                     }

{ID}	{
                     printf( "An Identifier: %s\n", yytext );
                     }

"=="|">="|"<="|"+="|"++"|"<<"|">>"|"-="|"*="|"/="|"%="|"--"|"+"|"-"|"*"|"/"|">"|"<"|"="|"%"|"&&"|"||"|"!"   printf( "An operator: %s\n", yytext );
;		{		
					 printf("A Semicolon\n");
					 }
,		{
					 printf("A comma\n");
					 }	
:       {
                     printf("A colon\n");
                     }  

"\{"		printf("Opening Curly bracket\n");

"\}"		printf("Closing Curly bracket\n");

"\["		printf("Opening square bracket\n");

"\]"		printf("Closing square bracket\n");

"\("		printf("Opening normal bracket\n");

"\)"		printf("Closing normal bracket\n");

{CHAR}		{	
				char char_temp[10];
				strncpy(char_temp,yytext+1,1);
				printf("A character : %s\n",char_temp);
					}

{STRING}	{	
				char str_temp[200000];
				strncpy(str_temp,yytext+1,yyleng-2);
				printf("A string: %s\n",str_temp);
					}

[ \n\t]				/* eat up whitespace */	



.					printf( "Unrecognized character: %s\n", yytext );



%%
     
         int main( int argc, char **argv )
             {
            
             if ( argc > 1 )
                     yyin = fopen( argv[1], "r" );
             else
                     yyin = stdin;
     
             yylex();
             }

